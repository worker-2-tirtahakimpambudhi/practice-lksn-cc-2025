AWSTemplateFormatVersion: 2010-09-09
Description: Create VPC with Public and Private Route Tables, RDS, ElastiCache, Lambda and API Gateway

Parameters:

  ###################################################################################
  ##                    Parameters For Networking (VPC)                            ##
  ###################################################################################

  VPCCidr:
    Type: String
    Default: 192.168.1.0/24
    Description: the cidr (classless inter domain route) blocks for vpc

  VPCName:
    Type: String
    Default: lksn-cc-2025-vpc 
    Description: the name for vpc 

  SubnetPrivateOneCidr:
    Type: String
    Description: the cidr for subnet private one must be valid format can calculate in https://cidr.xyz
    Default: 192.168.1.0/26

  SubnetPrivateTwoCidr:
    Type: String
    Description: the cidr for subnet private two must be valid format can calculate in https://cidr.xyz
    Default: 192.168.1.128/26

  SubnetPublicOneCidr:
    Type: String
    Description: the cidr for subnet public one must be valid format can calculate in https://cidr.xyz
    Default: 192.168.1.64/26

  SubnetPublicTwoCidr:
    Type: String
    Description: the cidr for subnet public two must be valid format can calculate in https://cidr.xyz
    Default: 192.168.1.192/26

  ###################################################################################
  ##                    Parameters For RDS                                         ##
  ###################################################################################

  DBName:
    Type: String
    Default: demodb
    Description: The database name

  DBUsername:
    Type: String
    Default: admin
    Description: The database admin username

  DBPassword:
    Type: String
    NoEcho: true
    Default: Password123!
    Description: The database admin password

  DBInstanceClass:
    Type: String
    Default: db.t3.micro
    Description: The database instance type
    
  ###################################################################################
  ##                    Parameters For ElastiCache                                 ##
  ###################################################################################

  CacheNodeType:
    Type: String
    Default: cache.t2.micro
    Description: The cache node type
    
  ###################################################################################
  ##                    Parameters For Lambda Function                             ##
  ###################################################################################
  
  LambdaRuntime:
    Type: String
    Default: nodejs18.x
    Description: Runtime for Lambda function
    
Resources:

  ###################################################################################
  ##                    Resources For Networking (VPC)                             ##
  ###################################################################################

  # 1. Create VPC
  CreateVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Ref VPCName
          
  # 2. Create Internet Gateway
  CreateInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${VPCName}-igw"
  
  # 3. Attach Internet Gateway to VPC
  AttachInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref CreateVPC
      InternetGatewayId: !Ref CreateInternetGateway
    
  # 4. Create Public Route, Route Table and Subnet
  CreatePublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref CreateVPC
      Tags:
        - Key: Name
          Value: !Sub "${VPCName}-public-rtb"
  
  CreatePublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref CreatePublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0 
      GatewayId: !Ref CreateInternetGateway

  CreatePublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref CreateVPC
      AvailabilityZone: !Select [0, !GetAZs ]
      CidrBlock: !Ref SubnetPublicOneCidr
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${VPCName}-public-subnet-1"
  
  CreatePublicSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref CreateVPC
      AvailabilityZone: !Select [1, !GetAZs ]
      CidrBlock: !Ref SubnetPublicTwoCidr
      MapPublicIpOnLaunch: true      
      Tags:
        - Key: Name
          Value: !Sub "${VPCName}-public-subnet-2"

  AssociationPublicRouteTableToSubnetOne:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref CreatePublicRouteTable
      SubnetId: !Ref CreatePublicSubnetOne

  AssociationPublicRouteTableToSubnetTwo:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref CreatePublicRouteTable
      SubnetId: !Ref CreatePublicSubnetTwo 
  
  # 5. Create Private Route, NAT Gateway, EIP, Route Table and Subnet
  CreateEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  CreateNATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId: !Ref CreatePublicSubnetOne
      AllocationId: !GetAtt CreateEIP.AllocationId

  CreatePrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref CreateVPC
      Tags:
        - Key: Name
          Value: !Sub "${VPCName}-private-rtb"

  CreatePrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref CreatePrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref CreateNATGateway

  CreatePrivateSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref CreateVPC
      AvailabilityZone: !Select [0, !GetAZs ]
      CidrBlock: !Ref SubnetPrivateOneCidr
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "${VPCName}-private-subnet-1"
  
  CreatePrivateSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref CreateVPC
      AvailabilityZone: !Select [1, !GetAZs ]
      CidrBlock: !Ref SubnetPrivateTwoCidr
      MapPublicIpOnLaunch: false      
      Tags:
        - Key: Name
          Value: !Sub "${VPCName}-private-subnet-2"

  AssociationPrivateRouteTableToSubnetOne:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref CreatePrivateRouteTable
      SubnetId: !Ref CreatePrivateSubnetOne

  AssociationPrivateRouteTableToSubnetTwo:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref CreatePrivateRouteTable
      SubnetId: !Ref CreatePrivateSubnetTwo 

  # 6. S3 Endpoint
  CreateS3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: 'Gateway'
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcId: !Ref CreateVPC
      RouteTableIds: 
        - !Ref CreatePublicRouteTable
        - !Ref CreatePrivateRouteTable

  BackEndAppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${VPCName}-be-app-sg"
      GroupDescription: Security group for the EC2 Instance Back End App
      VpcId: !Ref CreateVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 80
          ToPort: 80
          Description: Allow HTTP access only Elastic Load Balancer

        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 443
          ToPort: 443
          Description: Allow HTTPS access only Elastic Load Balancer  
      Tags:
        - Key: Name
          Value: Back End Security Group

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${VPCName}-rds-sg"
      GroupDescription: Security Group for the RDS Service
      VpcId: !Ref CreateVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          SourceSecurityGroupId: !Ref BackEndAppSecurityGroup
          FromPort: 3306
          ToPort: 3306
          Description: Allow MySQL access from Back End App Security Group
        - IpProtocol: tcp
          SourceSecurityGroupId: !Ref LambdaSecurityGroup
          FromPort: 3306
          ToPort: 3306
          Description: Allow MySQL access from Lambda Security Group
      Tags:
        - Key: Name
          Value: RDS Security Group

  ELCSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${VPCName}-elc-sg"
      GroupDescription: Security Group for the Elasticache Service
      VpcId: !Ref CreateVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          SourceSecurityGroupId: !Ref BackEndAppSecurityGroup
          FromPort: 6379
          ToPort: 6379
          Description: Allow Redis access from Back End App Security Group
        - IpProtocol: tcp
          SourceSecurityGroupId: !Ref LambdaSecurityGroup
          FromPort: 6379
          ToPort: 6379
          Description: Allow Redis access from Lambda Security Group
      Tags:
        - Key: Name
          Value: Elasticache Security Group

  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${VPCName}-lambda-sg"
      GroupDescription: Security Group for Lambda functions
      VpcId: !Ref CreateVPC
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic
      Tags:
        - Key: Name
          Value: Lambda Security Group

  ###################################################################################
  ##                    Resources For RDS                                          ##
  ###################################################################################

  RDSSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS instances
      SubnetIds:
        - !Ref CreatePrivateSubnetOne
        - !Ref CreatePrivateSubnetTwo
      Tags:
        - Key: Name
          Value: !Sub "${VPCName}-db-subnet-group"

  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: !Ref DBName
      AllocatedStorage: 20
      DBInstanceClass: !Ref DBInstanceClass
      Engine: mysql
      EngineVersion: 8.0.33
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      BackupRetentionPeriod: 0
      VPCSecurityGroups:
        - !GetAtt RDSSecurityGroup.GroupId
      DBSubnetGroupName: !Ref RDSSubnetGroup
      MultiAZ: false
      StorageType: gp2
      Tags:
        - Key: Name
          Value: !Sub "${VPCName}-mysql-db"
    DeletionPolicy: Delete

  ###################################################################################
  ##                    Resources For ElastiCache                                  ##
  ###################################################################################

  ElastiCacheSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: Subnet group for ElastiCache instances
      SubnetIds:
        - !Ref CreatePrivateSubnetOne
        - !Ref CreatePrivateSubnetTwo

  ElastiCacheCluster:
    Type: AWS::ElastiCache::CacheCluster
    Properties:
      CacheNodeType: !Ref CacheNodeType
      Engine: redis
      NumCacheNodes: 1
      VpcSecurityGroupIds:
        - !GetAtt ELCSecurityGroup.GroupId
      CacheSubnetGroupName: !Ref ElastiCacheSubnetGroup
      Tags:
        - Key: Name
          Value: !Sub "${VPCName}-redis-cluster"

  ###################################################################################
  ##                    Resources For Lambda                                       ##
  ###################################################################################

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole

  # Define Lambda functions for CRUD operations
  GetItemsFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${VPCName}-get-items"
      Handler: index.getItems
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: !Ref LambdaRuntime
      Timeout: 30
      MemorySize: 256
      Environment:
        Variables:
          DB_HOST: !GetAtt RDSInstance.Endpoint.Address
          DB_PORT: !GetAtt RDSInstance.Endpoint.Port
          DB_NAME: !Ref DBName
          DB_USER: !Ref DBUsername
          DB_PASSWORD: !Ref DBPassword
          REDIS_HOST: !GetAtt ElastiCacheCluster.RedisEndpoint.Address
          REDIS_PORT: !GetAtt ElastiCacheCluster.RedisEndpoint.Port
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref CreatePrivateSubnetOne
          - !Ref CreatePrivateSubnetTwo
      Code:
        ZipFile: |
          exports.getItems = async (event) => {
            // Code will be replaced during deployment
            return {
              statusCode: 200,
              body: JSON.stringify({ message: 'Get items placeholder' })
            };
          };
      Tags:
        - Key: Name
          Value: !Sub "${VPCName}-get-items-lambda"

  GetItemFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${VPCName}-get-item"
      Handler: index.getItem
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: !Ref LambdaRuntime
      Timeout: 30
      MemorySize: 256
      Environment:
        Variables:
          DB_HOST: !GetAtt RDSInstance.Endpoint.Address
          DB_PORT: !GetAtt RDSInstance.Endpoint.Port
          DB_NAME: !Ref DBName
          DB_USER: !Ref DBUsername
          DB_PASSWORD: !Ref DBPassword
          REDIS_HOST: !GetAtt ElastiCacheCluster.RedisEndpoint.Address
          REDIS_PORT: !GetAtt ElastiCacheCluster.RedisEndpoint.Port
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref CreatePrivateSubnetOne
          - !Ref CreatePrivateSubnetTwo
      Code:
        ZipFile: |
          exports.getItem = async (event) => {
            // Code will be replaced during deployment
            return {
              statusCode: 200,
              body: JSON.stringify({ message: 'Get item placeholder' })
            };
          };
      Tags:
        - Key: Name
          Value: !Sub "${VPCName}-get-item-lambda"

  CreateItemFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${VPCName}-create-item"
      Handler: index.createItem
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: !Ref LambdaRuntime
      Timeout: 30
      MemorySize: 256
      Environment:
        Variables:
          DB_HOST: !GetAtt RDSInstance.Endpoint.Address
          DB_PORT: !GetAtt RDSInstance.Endpoint.Port
          DB_NAME: !Ref DBName
          DB_USER: !Ref DBUsername
          DB_PASSWORD: !Ref DBPassword
          REDIS_HOST: !GetAtt ElastiCacheCluster.RedisEndpoint.Address
          REDIS_PORT: !GetAtt ElastiCacheCluster.RedisEndpoint.Port
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref CreatePrivateSubnetOne
          - !Ref CreatePrivateSubnetTwo
      Code:
        ZipFile: |
          exports.createItem = async (event) => {
            // Code will be replaced during deployment
            return {
              statusCode: 201,
              body: JSON.stringify({ message: 'Create item placeholder' })
            };
          };
      Tags:
        - Key: Name
          Value: !Sub "${VPCName}-create-item-lambda"

  UpdateItemFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${VPCName}-update-item"
      Handler: index.updateItem
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: !Ref LambdaRuntime
      Timeout: 30
      MemorySize: 256
      Environment:
        Variables:
          DB_HOST: !GetAtt RDSInstance.Endpoint.Address
          DB_PORT: !GetAtt RDSInstance.Endpoint.Port
          DB_NAME: !Ref DBName
          DB_USER: !Ref DBUsername
          DB_PASSWORD: !Ref DBPassword
          REDIS_HOST: !GetAtt ElastiCacheCluster.RedisEndpoint.Address
          REDIS_PORT: !GetAtt ElastiCacheCluster.RedisEndpoint.Port
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref CreatePrivateSubnetOne
          - !Ref CreatePrivateSubnetTwo
      Code:
        ZipFile: |
          exports.updateItem = async (event) => {
            // Code will be replaced during deployment
            return {
              statusCode: 200,
              body: JSON.stringify({ message: 'Update item placeholder' })
            };
          };
      Tags:
        - Key: Name
          Value: !Sub "${VPCName}-update-item-lambda"

  DeleteItemFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${VPCName}-delete-item"
      Handler: index.deleteItem
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: !Ref LambdaRuntime
      Timeout: 30
      MemorySize: 256
      Environment:
        Variables:
          DB_HOST: !GetAtt RDSInstance.Endpoint.Address
          DB_PORT: !GetAtt RDSInstance.Endpoint.Port
          DB_NAME: !Ref DBName
          DB_USER: !Ref DBUsername
          DB_PASSWORD: !Ref DBPassword
          REDIS_HOST: !GetAtt ElastiCacheCluster.RedisEndpoint.Address
          REDIS_PORT: !GetAtt ElastiCacheCluster.RedisEndpoint.Port
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref CreatePrivateSubnetOne
          - !Ref CreatePrivateSubnetTwo
      Code:
        ZipFile: |
          exports.deleteItem = async (event) => {
            // Code will be replaced during deployment
            return {
              statusCode: 200,
              body: JSON.stringify({ message: 'Delete item placeholder' })
            };
          };
      Tags:
        - Key: Name
          Value: !Sub "${VPCName}-delete-item-lambda"

  ###################################################################################
  ##                    Resources For API Gateway                                  ##
  ###################################################################################

  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub "${VPCName}-api"
      Description: API Gateway for CRUD operations
      EndpointConfiguration:
        Types:
          - REGIONAL

  ItemsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: items

  ItemIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !Ref ItemsResource
      PathPart: "{id}"

  # GET /items
  GetItemsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ItemsResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetItemsFunction.Arn}/invocations"

  # GET /items/{id}
  GetItemMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ItemIdResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetItemFunction.Arn}/invocations"

  # POST /items
  CreateItemMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ItemsResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateItemFunction.Arn}/invocations"

  # PUT /items/{id}
  UpdateItemMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ItemIdResource
      HttpMethod: PUT
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateItemFunction.Arn}/invocations"

  # DELETE /items/{id}
  DeleteItemMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ItemIdResource
      HttpMethod: DELETE
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteItemFunction.Arn}/invocations"

  # Deployment and Stage
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - GetItemsMethod
      - GetItemMethod
      - CreateItemMethod
      - UpdateItemMethod
      - DeleteItemMethod
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: prod

  # Lambda permissions for API Gateway
  GetItemsPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref GetItemsFunction
      Principal: apigateway.amazonaws.com

  GetItemPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref GetItemFunction
      Principal: apigateway.amazonaws.com

  CreateItemPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref CreateItemFunction
      Principal: apigateway.amazonaws.com

  UpdateItemPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref UpdateItemFunction
      Principal: apigateway.amazonaws.com

  DeleteItemPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref DeleteItemFunction
      Principal: apigateway.amazonaws.com

Outputs:
  VPCId:
    Description: The ID of the VPC
    Value: !Ref CreateVPC
    
  PublicSubnetOne:
    Description: The ID of the public subnet in AZ1
    Value: !Ref CreatePublicSubnetOne
    
  PublicSubnetTwo:
    Description: The ID of the public subnet in AZ2
    Value: !Ref CreatePublicSubnetTwo
    
  PrivateSubnetOne:
    Description: The ID of the private subnet in AZ1
    Value: !Ref CreatePrivateSubnetOne
    
  PrivateSubnetTwo:
    Description: The ID of the private subnet in AZ2
    Value: !Ref CreatePrivateSubnetTwo
    
  RDSEndpoint:
    Description: RDS MySQL Endpoint
    Value: !GetAtt RDSInstance.Endpoint.Address
    
  RedisEndpoint:
    Description: ElastiCache Redis Endpoint
    Value: !GetAtt ElastiCacheCluster.RedisEndpoint.Address
    
  APIGatewayURL:
    Description: API Gateway URL
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod"